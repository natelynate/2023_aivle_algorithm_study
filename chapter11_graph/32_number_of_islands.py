"""
섬의 개수
https://leetcode.com/problems/number-of-islands/

runtime: 290ms
memory: 18.45MB
"""
from collections import deque

class Solution:
    """
    Class Docstring
    """
    def numIslands_bfs(self, grid:list[list[str]]) -> int:
        """
        grid에 있는 모든 칸을 이중 for문으로 iterate하면서 미방문인 육지가 있으면 해당 좌표를 시작점으로 BFS를 실행함. 
        """
        N = len(grid) # 지도의 세로 길이
        M = len(grid[0]) # 지도의 가로 길이
             
        # 방향 벡터
        dy = [-1, 1, 0, 0]
        dx = [0, 0, -1, 1]
        queue = deque()
        answer = 0
        
        # 모든 좌표에 대해서 반복함 
        for oy in range(N):
            for ox in range(M):
                # 특정 좌표가 육지이고 아직 방문하지 않은 좌표라면 해당 좌표와 연결된 육지를 탐색
                if grid[oy][ox] == '1':
                    queue = deque([(oy, ox)]) # 탐색을 시작하는 육지의 좌표를 queue에 삽입              
                    # queue가 소진될 때까지 반복
                    while queue:
                        y, x = queue.popleft()
                        grid[y][x] = True
                        for nd in range(4):
                            ny = y + dy[nd]
                            nx = x + dx[nd]
                            # grid을 벗어나지 않는 인접 그리드에서 육지타일이면서 아직 미방문인 타일을 queue에 새로 삽입
                            if (0 <= ny < N) and (0 <= nx < M) and (grid[ny][nx] == '1'):
                                queue.append((ny, nx))
                                grid[ny][nx] = '0' # 방문처리
                    answer += 1
        return answer
    
    def numIslands_dfs(self, grid:list[list[str]]) -> int:
        """
        grid에 있는 모든 칸을 이중 for문으로 iterate하면서 미방문인 육지가 있으면 해당 좌표를 시작점으로 DFS를 실행함. 
        """
        def dfs(grid, y, x):
            """
            자체적으로 반환하는 것 없이 최대한으로 탐색만 계속함
            """
            # exit condition
            if not (0 <= y < N) or not (0 <= x < M) or (grid[y][x] == '0'):
                return
            
            # label as visited
            grid[y][x] = '0'
            
            # perform searching         
            for nd in range(4):
                ny = y + dy[nd]
                nx = x + dx[nd]
                dfs(grid, ny, nx)

        dy = [-1, 1, 0, 0]
        dx = [0, 0, -1, 1]
        N = len(grid) # 지도의 세로 길이
        M = len(grid[0]) # 지도의 가로 길이
        answer = 0
        
        for oy in range(N):
            for ox in range(M):
                if grid[oy][ox] == '1':
                    dfs(grid, oy, ox)
                    answer += 1 # 특정 좌표에서 dfs가 종료되면 섬 개수에 +1
        return answer
        

if __name__ == '__main__':
    inputs = [["1","0","0","1","1","1","0","1","1","0","0","0","0","0","0","0","0","0","0","0"],
             ["1","0","0","1","1","0","0","1","0","0","0","1","0","1","0","1","0","0","1","0"],
             ["0","0","0","1","1","1","1","0","1","0","1","1","0","0","0","0","1","0","1","0"],
             ["0","0","0","1","1","0","0","1","0","0","0","1","1","1","0","0","1","0","0","1"],
             ["0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0"],
             ["1","0","0","0","0","1","0","1","0","1","1","0","0","0","0","0","0","1","0","1"],
             ["0","0","0","1","0","0","0","1","0","1","0","1","0","1","0","1","0","1","0","1"],
             ["0","0","0","1","0","1","0","0","1","1","0","1","0","1","1","0","1","1","1","0"],
             ["0","0","0","0","1","0","0","1","1","0","0","0","0","1","0","0","0","1","0","1"],
             ["0","0","1","0","0","1","0","0","0","0","0","1","0","0","1","0","0","0","1","0"],
             ["1","0","0","1","0","0","0","0","0","0","0","1","0","0","1","0","1","0","1","0"],
             ["0","1","0","0","0","1","0","1","0","1","1","0","1","1","1","0","1","1","0","0"],
             ["1","1","0","1","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","1"],
             ["0","1","0","0","1","1","1","0","0","0","1","1","1","1","1","0","1","0","0","0"],
             ["0","0","1","1","1","0","0","0","1","1","0","0","0","1","0","1","0","0","0","0"],
             ["1","0","0","1","0","1","0","0","0","0","1","0","0","0","1","0","1","0","1","1"],
             ["1","0","1","0","0","0","0","0","0","1","0","0","0","1","0","1","0","0","0","0"],
             ["0","1","1","0","0","0","1","1","1","0","1","0","1","0","1","1","1","1","0","0"],
             ["0","1","0","0","0","0","1","1","0","0","1","0","1","0","0","1","0","0","1","1"],
             ["0","0","0","0","0","0","1","1","1","1","0","1","0","0","0","1","1","0","0","0"]]
    solution = Solution()
    # print(solution.numIslands_bfs(inputs))
    print(solution.numIslands_dfs(inputs))